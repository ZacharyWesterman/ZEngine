type_funccall	: IDENTIFIER . funccall

identifierlist	: IDENTIFIER IDENTIFIER !;
		| identifierlist IDENTIFIER

command		: IDENTIFIER list ;
		: identifierlist list ;

statementlist	: statement statement
		| statementlist statement

statement	: generalexpr ;
		| command ;
		| if_statement
		| else_statement
		| for_statement
		| foreach_statement
		| loop_statement
		| while_pre_stmt
		| while_post_stmt
		| run_statement
		| typevar_decl
		| variable_decl
		| return_statement

if_statement	: "if" ( boolexpr ) statement
		| "if" ( boolexpr ) { statement }
		| "if" ( boolexpr ) { statementlist }
		| "if" ( boolexpr ) { }
		| "if" ( boolexpr ) ;

else_statement	: "else" statement
		| "else" { statement }
		| "else" { statementlist }
		| "else" { }
		| "else" ;

for_statement	: "for" ( assignexpr ; boolexpr ; assignexpr ) statement
		| "for" ( assignexpr ; boolexpr ; assignexpr ) { statement }
		| "for" ( assignexpr ; boolexpr ; assignexpr ) { statementlist }
		| "for" ( assignexpr ; boolexpr ; assignexpr ) { }
		| "for" ( assignexpr ; boolexpr ; assignexpr ) ;

foreach_statement:"for" "each" variable "in" variable statement
		| "for" "each" variable "in" variable { statement }
		| "for" "each" variable "in" variable { statementlist }
		| "for" "each" variable "in" variable { }
		| "for" "each" variable "in" variable ;

loop_statement	: "loop" statement
		| "loop" { statement }
		| "loop" { statementlist }
		| "loop" { }
		| "loop" ;

while_pre_stmt	: "loop" "while" ( boolexpr ) statement
		| "loop" "while" ( boolexpr ) { statement }
		| "loop" "while" ( boolexpr ) { statementlist }
		| "loop" "while" ( boolexpr ) { }
		| "loop" "while" ( boolexpr ) ;

while_post_stmt	: "loop" statement "while" ( boolexpr )
		| "loop" { statement } "while" ( boolexpr )
		| "loop" { statementlist } "while" ( boolexpr )
		| "loop" { } "while" ( boolexpr )
		| "loop" ; "while" ( boolexpr )

run_statement	: "run" boolexpr ;

return_statement: "return" variable ;

ext_declaration	: typedecl
		| externaldecl
		| globaldecl

decllist	: declaration declaration
		| decllist declaration
		| declaration

int_declaration	: variable_decl
		| typevar_decl
		| function_decl

int_decllist	: int_declaration int_declaration
		| int_decllist int_declaration

typedecl	: "type" IDENTIFIER { int_declaration }
		| "type" IDENTIFIER { int_decllist }

globaldecl	: "global" assignexpr ;
		| "global" variable ;

externaldecl	: "external" variable ;

formalvardecl	: if#"function" IDENTIFIER (# "var" IDENTIFIER
		| if#formalvardecl ,# "var" IDENTIFIER
		| if#formaltypedecl ,# "var" IDENTIFIER

formaltypedecl	: if#"function" IDENTIFIER (# IDENTIFIER IDENTIFIER
		| if#formalvardecl ,# IDENTIFIER IDENTIFIER
		| if#formaltypedecl ,# IDENTIFIER IDENTIFIER
		
formaldecllist	: (formalvardecl or formaltypedecl) , (formalvardecl or formaltypedecl)
		| formaldecllist , (formalvardecl or formaltypedecl)
		
function_decl	: "function" IDENTIFIER (  ) { (statementlist or statement) }
		| "function" IDENTIFIER ( formalvardecl ) { (statementlist or statement) }
		| "function" IDENTIFIER ( formaltypedecl ) { (statementlist or statement) }
		| "function" IDENTIFIER ( formaldecllist ) { (statementlist or statement) }

