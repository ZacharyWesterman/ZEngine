exprlist	: boolexpr , boolexpr
		| exprlist , boolexpr

list		: { }
		| { boolexpr }
		| { exprlist }

parenthexpr	: !IDENTIFIER ( boolexpr )
		| operand

factorialexpr	: parenthexpr !
		| parenthexpr

add1expr	: factorialexpr ++
		| ++ factorialexpr
		| factorialexpr --
		| -- factorialexpr
		| factorialexpr

negatexpr	: - add1expr
		| add1expr

powerexpr	: negatexpr ^ negatexpr
		| negatexpr

multiplyexpr	: powerexpr *  powerexpr
		| powerexpr /  powerexpr
		| powerexpr // powerexpr
		| powerexpr %  powerexpr
		| powerexpr

addexpr		: multiplyexpr + multiplyexpr
		| multiplyexpr - multiplyexpr
		| multiplyexpr

boolexpr	: "not" addexpr
		| addexpr "and"  addexpr
		| addexpr "or"   addexpr
		| addexpr "xor"  addexpr
		| addexpr "nand" addexpr
		| addexpr "nor"  addexpr
		| addexpr "xnor"  addexpr
		| ~ addexpr
		| addexpr &  addexpr
		| addexpr |  addexpr
		| addexpr :  addexpr
		| addexpr ~& addexpr
		| addexpr ~| addexpr
		| addexpr ~: addexpr
		| addexpr
		| assignexpr

assignexpr	: var = boolexpr
		| var += boolexpr
		| var -= boolexpr
		| var *= boolexpr
		| var /= boolexpr
		| var //= boolexpr
		| var %= boolexpr

sizeofexpr	: "sizeof" ( boolexpr )

variable_decl	: "var" IDENTIFIER ;
		| "var" IDENTIFIER = boolexpr ;

typevar_decl	: IDENTIFIER IDENTIFIER ;
		| IDENTIFIER IDENTIFIER  = boolexpr ;

funccall	: IDENTIFIER ( )
		| IDENTIFIER ( boolexpr )
		| IDENTIFIER ( exprlist )

type_funccall	: parenthexpr . funccall

varindex	: parenthexpr index
		| varindex index
		| list index
		| LITERAL:STRING index
		| LITERAL:ARRAY index

typevar		: parenthexpr . IDENTIFIER ![ !(

variable	: IDENTIFIER !( ![ !.
		| varindex ![
		| typevar

operand		: variable
		| LITERAL
		| sizeofexpr
		| dimensionexpr
		| type_funccall
		| funccall
		| list

identifierlist	: IDENTIFIER IDENTIFIER !;
		| identifierlist IDENTIFIER

command		: IDENTIFIER { exprlist }
		| identifierlist { exprlist }
		| IDENTIFIER { boolexpr }
		| identifierlist { boolexpr }
		| IDENTIFIER { }
		| identifierlist { }

if_statement	: "if" ( boolexpr ) statement opt#else_statement
		| "if" ( boolexpr ) { statement } opt#else_statement
		| "if" ( boolexpr ) { statementlist } opt#else_statement
		| "if" ( boolexpr ) { } opt#else_statement
		| "if" ( boolexpr ) ; opt#else_statement

PSEUDO:
else_statement	: "else" statement
		| "else" { statement }
		| "else" { statementlist }
		| "else" { }
		| "else" ;

for_statement	: "for" ( boolexpr ; boolexpr ; boolexpr ) statement
		| "for" ( boolexpr ; boolexpr ; boolexpr ) { statement }
		| "for" ( boolexpr ; boolexpr ; boolexpr ) { statementlist }
		| "for" ( boolexpr ; boolexpr ; boolexpr ) { }
		| "for" ( boolexpr ; boolexpr ; boolexpr ) ;

REQ: if#{# OR if#statement#
statement	: boolexpr ;
		| command ;
		| if_statement
		| for_statement
		| foreach_statement
		| loop_statement
		| while_pre_stmt
		| while_post_stmt
		| run_statement
		| stop_statement
		| typevar_decl
		| variable_decl
		| return_statement
		| label_statement
		| goto_statement
		| gosub_statement
		| ;

statementlist	: statement statement
		| statementlist statement

dimensionexpr	: IDENTIFIER . "dim" ( boolexpr )
		| dim ( boolexpr )

foreach_statement:"for" "each" variable "in" variable statement
		| "for" "each" variable "in" variable { statement }
		| "for" "each" variable "in" variable { statementlist }
		| "for" "each" variable "in" variable { }
		| "for" "each" variable "in" variable ;

loop_statement	: "loop" statement !"while"
		| "loop" { statement } !"while"
		| "loop" { statementlist } !"while"
		| "loop" { } !"while"
		| "loop" ; !"while"

label_statement	: "label" IDENTIFIER ;

goto_statement	: "goto" IDENTIFIER ;

gosub_statement : "gosub" IDENTIFIER ;

subroutine_decl : "sub" IDENTIFIER { }
		| "sub" IDENTIFIER { statement }
		| "sub" IDENTIFIER { statementlist }

while_pre_stmt	: "loop" "while" ( boolexpr ) statement
		| "loop" "while" ( boolexpr ) { statement }
		| "loop" "while" ( boolexpr ) { statementlist }
		| "loop" "while" ( boolexpr ) { }
		| "loop" "while" ( boolexpr ) ;

while_post_stmt	: "loop" statement "while" ( boolexpr )
		| "loop" { statement } "while" ( boolexpr )
		| "loop" { statementlist } "while" ( boolexpr )
		| "loop" { } "while" ( boolexpr )
		| "loop" ; "while" ( boolexpr )

run_statement	: "run" boolexpr ;

return_statement: "return" boolexpr ;
		| "return" ;

wait_statement	: "wait" boolexpr ;

until_statement	: "wait" "until" boolexpr ;

externaldecl	: "external" variable ;

shareddecl	: "shared" variable ;

range		: boolexpr -> boolexpr
		| boolexpr <- boolexpr

rangelist	: if#[# (range OR boolexpr) ,			-> [ rangelist ...
		| if#[# rangelist (range OR boolexpr) ,		-> [ rangelist ...
		| if#[# rangelist (range OR boolexpr) if#]#	-> [ rangelist ]

index		: [ boolexpr ]
		| [ rangelist ]
		| [ range ]

formalvardecl	: if#IDENTIFIER (# "var" IDENTIFIER
		| if#formalvardecl ,# "var" IDENTIFIER
		| if#formaltypedecl ,# "var" IDENTIFIER

formaltypedecl	: if#IDENTIFIER (# IDENTIFIER IDENTIFIER
		| if#formalvardecl ,# IDENTIFIER IDENTIFIER
		| if#formaltypedecl ,# IDENTIFIER IDENTIFIER

formaldecllist	: (formalvardecl or formaltypedecl) , (formalvardecl or formaltypedecl)
		| formaldecllist , (formalvardecl or formaltypedecl)

function_decl	: IDENTIFIER ( ) { }
		| IDENTIFIER (  ) { statement }
		| IDENTIFIER (  ) { statementlist }
		| IDENTIFIER ( formalvardecl ) { ... }
		| IDENTIFIER ( formaltypedecl ) { ... }
		| IDENTIFIER ( formaldecllist ) { ... }
		| IDENTIFIER ( ... ) { ... }
		| "var" IDENTIFIER ( ) { }
		| "var" IDENTIFIER ( ) { ... }
		| "var" IDENTIFIER ( ... ) { }
		| "var" IDENTIFIER ( ... ) { ... }
		| IDENTIFIER IDENTIFIER ( ) { }
		| IDENTIFIER IDENTIFIER ( ) { ... }
		| IDENTIFIER IDENTIFIER ( ... ) { }
		| IDENTIFIER IDENTIFIER ( ... ) { ... }

func_prototype	: "var" IDENTIFIER ( ) ;
		| "var" IDENTIFIER ( ... ) ;
		| IDENTIFIER IDENTIFIER ( ) ;
		| IDENTIFIER IDENTIFIER ( ... ) ;

PSEUDO:
int_declaration	: variable_decl
		| typevar_decl
		| function_decl

int_decllist	: if#"type" IDENTIFIER {# int_declaration int_declaration
		| int_decllist int_declaration

typedecl	: "type" IDENTIFIER { variable_decl }
		| "type" IDENTIFIER { typevar_decl }
		| "type" IDENTIFIER { function_decl }
		| "type" IDENTIFIER { int_decllist }

PSEUDO:
ext_decl	: variable_decl
		| typevar_decl
		| function_decl
		| typedecl
		| externaldecl
		| shareddecl

program		: ext_decl ext_decl ... $EOF
		| ext_decl $EOF

stop_statement	: "stop" boolexpr ;
