All {var} and such indicate a variable index. The variable index {0} is defined as parameters from the parent program.
If program attempts to read from or assign to a variable index that is not currently allocated, generate error at SEVERE level.
For boolean values, TRUE is defined as 1 and FALSE is defined as 0.

[Arithmetic]	Non-arithmetic inputs generate error at MED level, and cause operation to return 0. Overflow or underflow generates error at MED level.
ADD		{var1}	{var2}	{varOut}			|	add {var1} and {var2}, storing result in {varOut}.
SUB		{var1}	{var2}	{varOut}			|	subtract {var2} from {var1}, storing result in {varOut}.
MUL		{var1}	{var2}	{varOut}			|	multiply {var1} by {var2}, storing result in {varOut}.
DIV		{var1}	{var2}	{varOut}			|	divide {var1} by {var2}, storing result in {varOut}. Division by zero generates error at MED level.
IDIV	{var1}	{var2}	{varOut}			|	divide {var1} by {var2}, truncating fractional values and storing result in {varOut}. Division by zero generates error at MED level.
REMD	{var1}	{var2}	{varOut}			|	divide {var1} by {var2}, storing remainder in {varOut}. Division by zero generates error at MED level.
POW		{var1}	{var2}	{varOut}			|	raise {var1} to the {var2} power, storing result in {varOut}.
FAC		{var}	{varOut}					|	calculate the factorial of {var}, storing result in {varOut}. overflow returns MAX-INT and generates MED error. if var not nonnegative integer, var is rounded to nearest nonnegative integer, and generates MED error.

[Assign]
CONST		{const}		{varOut}			|	assign {varOut} to the static value {const}.
ASGMEM		{var}		{varOut}			|	assign {varOut} to the value stored in {var}.
MEMALLOC	{amount}						|	allocate {amount} variables on this program's stack.
MEMFREE		{amount}						|	free the top {amount} variables on this program's stack.
MEMSIZE		{varOut}						|	return the number of variables on this program's stack in {varOut}.
DEFCMD		{varOut}	{stringList}		|	register extension command alias, returning command ID in {varOut}. If alias matches no command, does nothing and generates error at SEVERE level.
DEFFUNC		{varOut}	{stringList}		|	register extension function alias, returning function ID in {varOut}. If alias matches no function, does nothing and generates error at SEVERE level.

[Shared]	As the name implies, shared variables are shared between and accessible by all programs. Unlike regular variables, shared variables are mapped to string IDs and do not require explicit allocation.
ASGSHARED	{var}			{varOut.shared}	|	Assign the value in {var} to the shared variable {varOut.shared}.
GETSHARED	{var.shared}	{varOut}		|	Copy the value in the shared variable {var.shared} into the variable {varOut}.

[Comparison]	Compare {var1} and {var2}, generating a boolean value that is TRUE in the following case(non-comparable values result in FALSE). Result is stored in {varOut}
EQ	{var1}	{var2}	{varOut}				|	true if {var1} = {var2}.
NE	{var1}	{var2}	{varOut}				|	false if {var1} = {var2}.
GT	{var1}	{var2}	{varOut}				|	If both arithmetic, true if {var1} > {var2}. if one is a string, true if {var1} comes after {var2} alphabetically.
GE	{var1}	{var2}	{varOut}				|	true if {var1} = {var2}. also: If both arithmetic, true if {var1} > {var2}. if one is a string, true if {var1} comes after {var2} alphabetically.
LT	{var1}	{var2}	{varOut}				|	If both arithmetic, true if {var1} < {var2}. if one is a string, true if {var1} comes before {var2} alphabetically.
LE	{var1}	{var2}	{varOut}				|	true if {var1} = {var2}. also: If both arithmetic, true if {var1} < {var2}. if one is a string, true if {var1} comes before {var2} alphabetically.

[Boolean (Logical)]	Calculate the logical boolean result of operation, storing in {varOut}. Non-zero arithmetic params evaluate to TRUE. Non-arithmetic params evaluate to FALSE and generate error at LOW level.
AND		{var1}	{var2}	{varOut}			|
OR		{var1}	{var2}	{varOut}			|
NAND	{var1}	{var2}	{varOut}			|
NOR		{var1}	{var2}	{varOut}			|
XOR		{var1}	{var2}	{varOut}			|
XNOR	{var1}	{var2}	{varOut}			|
NOT		{var}	{varOut}					|

[Boolean (Bitwise)] Calculate the bitwise boolean result of operation, storing in {varOut}. Non-arithmetic params evaluate to FALSE and generate error at LOW level. For non-real or non-integer arithmetic params, the fractional and imaginary parts are truncated and a LOW error is generated.
ANDB	{var1}	{var2}	{varOut}			|
ORB		{var1}	{var2}	{varOut}			|
NANDB	{var1}	{var2}	{varOut}			|
NORB	{var1}	{var2}	{varOut}			|
XORB	{var1}	{var2}	{varOut}			|
XNORB	{var1}	{var2}	{varOut}			|
NOTB	{var}	{varOut}					|

[Datatype (Get Convert)]	Convert the type of {var}, storing result in {varOut}.
REDUCE	{var}	{varOut}					|	Reduce {var} to it's simplest type without losing information. Complex numbers with no imaginary part reduce to floats. Floats with no fractional part reduce to integers. Null strings and pointers reduce to NULL. Arrays do not reduce.
POINTER	{var}	{varOut}					|	Get pointer value of {var}. Returns null pointer if not originally a pointer type.
ARRAY	{var}	{varOut}					|	Get array data of {var}. returns null array if not originally an array type.
STRING	{var}	{varOut}					|	Convert to a string type.
COMPLEX	{var}	{varOut}					|	Convert to complex type if possible. If not, returns 0+0i.
FLOAT	{var}	{varOut}					|	Convert to floating point if possible. If not, returns 0.0. If originally complex, the imaginary part is truncated.
INT		{var}	{varOut}					|	Convert to an integer if possible. If not, returns 0. Imaginary and fractional parts are truncated.
BOOL	{var}	{varOut}					|	Convert to boolean value. Any non-zero arithmetic value evaluates to TRUE. All other values evaluate to FALSE.

[Datatype (Get Status)]	Get the type status of {var}, storing result in {varOut}.
TYPE		{var}	{varOut}				|	Get an integer value indicating the exact type.
TYPESTR		{var}	{varOut}				|	Get a string value indicating the exact type.
ISPOINTER	{var}	{varOut}				|	Return TRUE if type is pointer, FALSE otherwise.
ISARRAY		{var}	{varOut}				|	Return TRUE if type is array, FALSE otherwise.
ISSTRING	{var}	{varOut}				|	Return TRUE if type is string, FALSE otherwise.
ISARITH		{var}	{varOut}				| 	Return TRUE if type is complex, float or integer, or string that can evaluate to any of those.
ISCOMPLEX	{var}	{varOut}				|	Return TRUE if type can evaluate to a complex value without losing information. FALSE otherwise.
ISFLOAT		{var}	{varOut}				|	Return TRUE if type can evaluate to a float without losing information. FALSE otherwise.
ISINT		{var}	{varOut}				|	Return TRUE if type can evaluate to an integer without losing information. FALSE otherwise.
ISNULL		{var}	{varOut}				|	Return TRUE if NULL or null string, pointer, or array. FALSE otherwise.

[Array Manip]	Note that array or string "indexes" are an offset from the beginning, and thus start at 0. If {offset} is not a non-negative integer, returns a null array and generates error at HIGH level.
ARRAYIZE	{var}	{offset}	{varOut}	|	Get {var} and the next {offset} contiguous variables and concatenate them into an array, storing in {varOut}.
APPEND		{var}	{varOut}				|	Add {var} as an element storing at the end of {varOut}. If {varOut} is not an array, does nothing and generates an error at HIGH level.
INSERT		{var}	{offset}	{varOut}	|	Insert {var} as an element before the {offset} element of and storing in {varOut}. If {varOut} is not an array, does nothing and generates an error at HIGH level.
DELETE		{offset}	{varOut}			|	Remove the {offset} element from and storing in {varOut}. If {varOut} is not an array, does nothing and generates an error at HIGH level.
GETELEM		{var}	{offset}	{varOut}	|	Copy the {offset} element of {var}, storing in {varOut}. If {var} is not an array or a string, does nothing and generates an error at HIGH level.
SETELEM		{var}	{offset}	{varOut}	|	Set the {offset} element of {varOut} to the value in {var}. If {varOut} is not an array or a string, does nothing and generates an error at HIGH level.
ELEMCT		{var}	{varOut}				|	Get the element count of {var}, storing in {varOut}. If {var} is not an array or a string, returns 0.
CONCAT		{var1}	{var2}		{varOut}	|	Force convert {var1} and {var2} to strings and concatenate {var2} to the end of {var1}, storing the result in {varOut}.

[Control]	If the instruction index specified in {instr} is invalid then generates error at SEVERE level.
JUMPTRUE	{var}	{instr}					|	Jump to the instruction at {instr} if {var} evaluates to TRUE.
JUMPFALSE	{var}	{instr}					|	Jump to the instruction at {instr} if {var} evaluates to FALSE.
JUMP		{instr}							|	Jump to the instruction at {instr}.
JUMPPUSH	{instr}							|	Jump to the instruction at {instr}, pushing the next instruction onto the instruction stack.
RETURN										|	Jump to the location of the last instruction on the stack, removing that instruction from the instruction stack.

[Language]
INITGUI		{var}	{varOut}				|	Initialize the GUI interface with the parameters in {var}. Results/status are returned in {varOut}.
INITENGINE	{var}	{varOut}				|	Initialize the rendering engine the parameters in {var}. Results/status are returned in {varOut}.
INITAUDIO	{var}	{varOut}				|	Initialize the audio engine with the parameters in {var}. Results/status are returned in {varOut}.
TERMGUI		{varOut}						|	Terminate the GUI interface. Results/status are returned in {varOut}.
TERMENGINE	{varOut}						|	Terminate the rendering engine. Results/status are returned in {varOut}.
TERMAUDIO	{varOut}						|	Terminate the audio engine. Results/status are returned in {varOut}.
SETGOALFPS	{var}							|	Set the goal frames per second for the rendering engine. If {var} is not a real numerical value, does nothing and generates error at HIGH level. If {var} is negative, goal FPS is unlimited.
GETGOALFPS	{varOut}						|	Get the current goal frames per second for the rendering engine, storing in {varOut}. Returns -1 if goal FPS is unlimited.
SETGOALIPS	{var}							|	Set the goal instructions per second for this program. If {var} is not a real numerical value, does nothing and generates error at HIGH level. If {var} is negative, goal IPS is unlimited.
GETGOALIPS	{varOut}						|	Get the current goal instructions per second for this program, storing in {varOut}. Returns -1 if goal IPS is unlimited.
WAIT		{var}							|	Pause execution of this program for approximately {var} milliseconds. If {var} is not a positive real value, then this instruction does nothing.
SETERRLOW									|	Ignore no errors that this or any child programs generate.
SETERRMED									|	Ignore any LOW errors that this or any child programs generate.
SETERRHIGH									|	Ignore any LOW or MED errors that this or any child programs generate.
SETERRSEVERE								|	Ignore any LOW, MED or HIGH errors that this or any child programs generate.
SETERRIGNORE								|	Ignore any errors that this or any child programs generate.
EXITONERROR	{var}							|	If {var} evaluates to TRUE, then cease execution of this and all child programs when one of those programs generates a non-ignored error.
GETLASTERROR	{varOut}					|	Copy the last non-ignored error message into {varOut}. This clears the last error message.
EXIT		{var}							|	Cease execution of this and all child programs, returning {var} to the parent program. If this is the only program still in execution, zengine terminates.
RUN			{var1}	{var2}	{varOut}		|	Run the compiled (child) program specified in {var1} with the parameters in {var2}. TRUE returned in {varOut} if launch successful, FALSE otherwise.
CPLRUN		{var1}	{var2}	{var3}	{varOut}|	Compile and run the program specified in {var1} with run specifics in {var2} and params in {var3}. TRUE returned in {varOut} if launch successful, FALSE otherwise.
CHECKSTATUS	{var}	{varOut}				|	Assign TRUE to {varOut} if the program with ID {var} is running, FALSE otherwise.
WAITEXIT	{var}	{varOut}				|	Wait for the program with ID {var} to exit, setting {varOut} to its return value. If no program with specified ID, {varOut} is set to NULL and generates error at SEVERE level.
WAITANYEXIT	{varOut}						|	Wait for any child program to exit, setting {varOut} to its return value. If no child programs, {varOut} is set to NULL.
WAITALLEXIT	{varOut}						|	Wait for all child programs to exit, setting {varOut} to an array containing their return values. If no child programs, {varOut} is set to NULL.
KILLPROGRAM	{var}							|	Cause the program with the ID {var} to immediately cease execution. Does nothing if the program is not running.
RUNCMD		{var1}	{var2}					|	Execute the command of ID {var1} with the parameters in {var2}.	If no command of that ID, does nothing and generates error at SEVERE level.
CALLFUNC	{var1}	{var2}	{varOut}		|	Call the function of ID {var1} with the parameters in {var2}, returning result in {varOut}. If no function of that ID, does nothing and generates error at SEVERE level.
