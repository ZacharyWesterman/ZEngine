index		: [ boolexpr ]

indexlist	: index index
		| indexlist index

exprlist	: boolexpr , boolexpr
		| exprlist , boolexpr

list		: { }
		| { boolexpr }
		| { exprlist }

parenthexpr	: !IDENTIFIER ( boolexpr )
		| operand
		| sizeofexpr

factorialexpr	: parenthexpr !
		| parenthexpr

add1expr	: factorialexpr ++
		| ++ factorialexpr
		| factorialexpr --
		| -- factorialexpr
		| factorialexpr

negatexpr	: - add1expr
		| add1expr

powerexpr	: negatexpr ^ negatexpr
		| negatexpr

multiplyexpr	: powerexpr *  powerexpr
		| powerexpr /  powerexpr
		| powerexpr // powerexpr
		| powerexpr %  powerexpr
		| powerexpr

addexpr		: multiplyexpr + multiplyexpr
		| multiplyexpr - multiplyexpr
		| multiplyexpr

boolexpr	: "not" addexpr
		| addexpr "and"  addexpr
		| addexpr "or"   addexpr
		| addexpr "xor"  addexpr
		| addexpr "nand" addexpr
		| addexpr "nor"  addexpr
		| addexpr "xnor"  addexpr
		| ~ addexpr
		| addexpr &  addexpr
		| addexpr |  addexpr
		| addexpr :  addexpr
		| addexpr ~& addexpr
		| addexpr ~| addexpr
		| addexpr ~: addexpr
		| addexpr
		| assignexpr

assignexpr	: var = boolexpr
		| var += boolexpr
		| var -= boolexpr
		| var *= boolexpr
		| var /= boolexpr
		| var //= boolexpr
		| var %= boolexpr

sizeofexpr	: "sizeof" ( boolexpr )

variable_decl	: "var" IDENTIFIER ;

typevar_decl	: IDENTIFIER IDENTIFIER ;

funccall	: IDENTIFIER ( )
		| IDENTIFIER ( boolexpr )
		| IDENTIFIER ( exprlist )

type_funccall	: IDENTIFIER . funccall

varindex	: IDENTIFIER indexlist
		| IDENTIFIER index

typevar		: IDENTIFIER . IDENTIFIER ![ !(
		| IDENTIFIER . varindex

variable	: IDENTIFIER !( ![ !.
		| varindex
		| typevar

operand		: variable
		| NUMERIC_LITERAL
		| COMPLEX_LITERAL
		| STRING_LITERAL
		| sizeofexpr
		| dimensionexpr
		| type_funccall
		| funccall
		| list

identifierlist	: IDENTIFIER IDENTIFIER !;
		| identifierlist IDENTIFIER

command		: IDENTIFIER list ;
		: identifierlist list ;

if_statement	: "if" ( boolexpr ) statement opt#else_statement
		| "if" ( boolexpr ) { statement } opt#else_statement
		| "if" ( boolexpr ) { statementlist } opt#else_statement
		| "if" ( boolexpr ) { } opt#else_statement
		| "if" ( boolexpr ) ; opt#else_statement

PSEUDO:
else_statement	: "else" statement
		| "else" { statement }
		| "else" { statementlist }
		| "else" { }
		| "else" ;

for_statement	: "for" ( boolexpr ; boolexpr ; boolexpr ) statement
		| "for" ( boolexpr ; boolexpr ; boolexpr ) { statement }
		| "for" ( boolexpr ; boolexpr ; boolexpr ) { statementlist }
		| "for" ( boolexpr ; boolexpr ; boolexpr ) { }
		| "for" ( boolexpr ; boolexpr ; boolexpr ) ;

statement	: boolexpr ;
		| command
		| if_statement
		| for_statement
		| foreach_statement
		| loop_statement
		| while_pre_stmt
		| while_post_stmt
		| run_statement
		| typevar_decl
		| variable_decl
		| return_statement
		| label_statement
		| goto_statement
		| gosub_statement

statementlist	: statement statement
		| statementlist statement

dimensionexpr	: "dim" boolexpr

foreach_statement:"for" "each" variable "in" variable statement
		| "for" "each" variable "in" variable { statement }
		| "for" "each" variable "in" variable { statementlist }
		| "for" "each" variable "in" variable { }
		| "for" "each" variable "in" variable ;

loop_statement	: "loop" statement !"while"
		| "loop" { statement } !"while"
		| "loop" { statementlist } !"while"
		| "loop" { } !"while"
		| "loop" ; !"while"

label_statement	: "label" IDENTIFIER ;

goto_statement	: "goto" IDENTIFIER ;

gosub_statement : "gosub" IDENTIFIER ;

subroutine_decl : "sub" IDENTIFIER { }
		| "sub" IDENTIFIER { statement }
		| "sub" IDENTIFIER { statementlist }

while_pre_stmt	: "loop" "while" ( boolexpr ) statement
		| "loop" "while" ( boolexpr ) { statement }
		| "loop" "while" ( boolexpr ) { statementlist }
		| "loop" "while" ( boolexpr ) { }
		| "loop" "while" ( boolexpr ) ;

while_post_stmt	: "loop" statement "while" ( boolexpr )
		| "loop" { statement } "while" ( boolexpr )
		| "loop" { statementlist } "while" ( boolexpr )
		| "loop" { } "while" ( boolexpr )
		| "loop" ; "while" ( boolexpr )

run_statement	: "run" boolexpr ;

return_statement: "return" boolexpr ;

wait_statement	: "wait" boolexpr ;

until_statement	: "wait" "until" boolexpr ;

externaldecl	: "external" variable ;

shareddecl	: "shared" variable ;
